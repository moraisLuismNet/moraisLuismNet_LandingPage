const d=[{title:"AdministrationDB",description:"ASP.NET Core 8.0 web application for managing massage and Pilates client information. This integrated management system allows you to maintain complete client records, schedule and manage appointments and sessions, track health-related information (such as conditions and goals), send appointment notifications, and export data for analysis and reporting. The application also supports user authentication and authorization. It uses SQLite with Entity Framework Core, Razor Views with Bootstrap and iText7 for PDF export.",link:"https://github.com/moraisLuismNet/AdministrationDB",image:"/img/AdministrationDB.png"},{title:"AngularChatAPI_20",description:"A interactive chat system with visual effects that simulates a conversation through a REST API, using Angular 20.1.2 as its main framework. The project includes typewriter effects to create a more immersive chat experience, uses PrimeNG for UI components, RxJS for reactive programming and TypeScript 5.8.3.",link:"https://github.com/moraisLuismNet/AngularChatAPI_20",image:"/img/AngularChatAPI.png"},{title:"AngulareCommerceDsImageUrl_20",description:"A e-commerce application developed with Angular 20.1.2. Its main objective is to allow users to browse and purchase albums from different bands and music genres, as well as manage their orders and shopping carts. The application has two main areas of functionality: one for general users and one for administrators. For general users: Registration and Login, Product Browsing, Shopping Cart and Order Management. For administrators: Genre Management, Group Management, Album Management, User Management, Order Management (Admin) and Cart Management (Admin). It uses Bootstrap 5, PrimeNG and JWT for authentication. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/AngulareCommerceDsImageUrl_20",image:"/img/AngulareCommerce.png"},{title:"AngulareCommerceDsImageUrlDocker_20",description:"A e-commerce application developed with Angular 20.1.2. Its main objective is to allow users to browse and purchase albums from different bands and music genres, as well as manage their orders and shopping carts. The application has two main areas of functionality: one for general users and one for administrators. For general users: Registration and Login, Product Browsing, Shopping Cart and Order Management. For administrators: Genre Management, Group Management, Album Management, User Management, Order Management (Admin) and Cart Management (Admin). It uses Bootstrap 5, PrimeNG and JWT for authentication. Connects to an API contained in a Docker. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/AngulareCommerceDsImageUrlDocker_20",image:"/img/AngulareCommerce.png"},{title:"AngulareCommerceDsMicroServicesImageUrl_20",description:"A e-commerce application developed with Angular 20.1.2. Its main objective is to allow users to browse and purchase albums from different bands and music genres, as well as manage their orders and shopping carts. The application has two main areas of functionality: one for general users and one for administrators. For general users: Registration and Login, Product Browsing, Shopping Cart and Order Management. For administrators: Genre Management, Group Management, Album Management, User Management, Order Management (Admin) and Cart Management (Admin). It uses Bootstrap 5, PrimeNG and JWT for authentication. It uses a microservices architecture where the Angular application acts as a frontend client that connects to multiple backend REST APIs. Access is done through three main microservices: userService (port 7170): Handles authentication and user management; cdService (port 7262): Manages albums, bands, and genres; and shoppingService (port 7273): Handles shopping carts and orders. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/AngulareCommerceDsMicroServicesImageUrl_20",image:"/img/AngulareCommerce.png"},{title:"AngulareCommerceDsMicroServicesImageUrlDocker_20",description:"A e-commerce application developed with Angular 20.1.2. Its main objective is to allow users to browse and purchase albums from different bands and music genres, as well as manage their orders and shopping carts. The application has two main areas of functionality: one for general users and one for administrators. For general users: Registration and Login, Product Browsing, Shopping Cart and Order Management. For administrators: Genre Management, Group Management, Album Management, User Management, Order Management (Admin) and Cart Management (Admin). It uses Bootstrap 5, PrimeNG and JWT for authentication. Connects to an API contained in a Docker. It uses a microservices architecture where the Angular application acts as a frontend client that connects to multiple backend REST APIs. Access is done through three main microservices: userService (port 7170): Handles authentication and user management; cdService (port 7262): Manages albums, bands, and genres; and shoppingService (port 7273): Handles shopping carts and orders. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/AngulareCommerceDsMicroServicesImageUrlDocker_20",image:"/img/AngulareCommerce.png"},{title:"AngulareCommerceDsNodeExpressTypeScriptMongoDB_20",description:"A e-commerce application developed with Angular 20.1.2. Its main objective is to allow users to browse and purchase albums from different bands and music genres, as well as manage their orders and shopping carts. The application has two main areas of functionality: one for general users and one for administrators. For general users: Registration and Login, Product Browsing, Shopping Cart and Order Management. For administrators: Genre Management, Group Management, Album Management, User Management, Order Management (Admin) and Cart Management (Admin). It uses Bootstrap 5, PrimeNG and JWT for authentication. The backend is built with Node, Express, TypeScript and MongoDB.",link:"https://github.com/moraisLuismNet/AngulareCommerceDsNodeExpressTypeScriptMongoDB_20",image:"/img/AngulareCommerce.png"},{title:"AngulareCommerceDsNodeExpressTypeScriptPostgreSQL_20",description:"A e-commerce application developed with Angular 20.1.2. Its main objective is to allow users to browse and purchase albums from different bands and music genres, as well as manage their orders and shopping carts. The application has two main areas of functionality: one for general users and one for administrators. For general users: Registration and Login, Product Browsing, Shopping Cart and Order Management. For administrators: Genre Management, Group Management, Album Management, User Management, Order Management (Admin) and Cart Management (Admin). It uses Bootstrap 5, PrimeNG and JWT for authentication. The backend is built with Node, Express, TypeScript and PostgreSQL.",link:"https://github.com/moraisLuismNet/AngulareCommerceDsNodeExpressTypeScriptPostgreSQL_20",image:"/img/AngulareCommerce.png"},{title:"AngulareCommerceDsNodeExpressTypeScriptPostgreSQLDocker_20",description:"A e-commerce application developed with Angular 20.1.2. Its main objective is to allow users to browse and purchase albums from different bands and music genres, as well as manage their orders and shopping carts. The application has two main areas of functionality: one for general users and one for administrators. For general users: Registration and Login, Product Browsing, Shopping Cart and Order Management. For administrators: Genre Management, Group Management, Album Management, User Management, Order Management (Admin) and Cart Management (Admin). It uses Bootstrap 5, PrimeNG and JWT for authentication. Connects to an API contained in a Docker. The backend is built with Node, Express, TypeScript and PostgreSQL.",link:"https://github.com/moraisLuismNet/AngulareCommerceDsNodeExpressTypeScriptPostgreSQLDocker_20",image:"/img/AngulareCommerce.png"},{title:"AngularLibraryNodeExpressTypeScriptMongoDB_20",description:"A library management web application developed with Angular 20.1.2. It allows users to authenticate themselves and manage authors, publishers, and books. The application is an administration panel for managing a library's core resources (authors, publishers, and books), with a basic authentication and access protection system. It uses Bootstrap 5, PrimeNG and JWT for authentication. The backend is built with Node, Express, TypeScript and MongoDB.",link:"https://github.com/moraisLuismNet/AngularLibraryNodeExpressTypeScriptMongoDB_20",image:"/img/AngularLibrary.png"},{title:"AngularLibraryNodeExpressTypeScriptPostgreSQL_20",description:"A library management web application developed with Angular 20.1.2. It allows users to authenticate themselves and manage authors, publishers, and books. The application is an administration panel for managing a library's core resources (authors, publishers, and books), with a basic authentication and access protection system. It uses Bootstrap 5, PrimeNG and JWT for authentication. The backend is built with Node, Express, TypeScript and PostgreSQL.",link:"https://github.com/moraisLuismNet/AngularLibraryNodeExpressTypeScriptPostgreSQL_20",image:"/img/AngularLibrary.png"},{title:"AngularLibrary_20",description:"A library management web application developed with Angular 20.1.2. It allows users to authenticate themselves and manage authors, publishers, and books. The application is an administration panel for managing a library's core resources (authors, publishers, and books), with a basic authentication and access protection system. It uses Bootstrap 5, PrimeNG and JWT for authentication.",link:"https://github.com/moraisLuismNet/AngularLibrary_20",image:"/img/AngularLibrary.png"},{title:"AngularStore_20",description:"A web application that provides a user interface for managing categories and products developed with Angular 20.1.2. The application requires users to log in to access its features (Category Management and Product Management). It uses Bootstrap 5, PrimeNG and JWT for authentication.",link:"https://github.com/moraisLuismNet/AngularStore_20",image:"/img/AngularStore.png"},{title:"ChatAPI",description:"ASP.NET Core 8.0 Web API is a chat service that uses the Mistral 7B artificial intelligence model through OpenRouter.ai. The processing flow is as follows: It receives the HTTP POST request, extracts the user's message (request.Message), and invokes the MistralService service on the controller (ChatController).",link:"https://github.com/moraisLuismNet/ChatAPI.git",image:"/img/ChatAPI.png"},{title:"ChatMVC",description:"ASP.NET Core 8.0 Web API with Razor Views is an interactive web interface that allows users to chat with the Mistral 7B model using an OpenRouter API. Index loads the initial view using the ChatViewModel. SendMessage (POST) receives the user's message via AJAX, adds the message to the history, calls the MistralService service to retrieve the response from the IA model and returns the response as JSON.",link:"https://github.com/moraisLuismNet/ChatMVC.git",image:"/img/ChatMVC.png"},{title:"eCommerceDsImageUrl",description:"ASP.NET Core 8.0 Web API project. It is the backend service layer for an e-commerce application, focused on data management. The Repository implements the data access logic. The Services contain the application's business logic. Key features implemented in the project include: Authentication and Authorization, User Management, Catalog Management, Shopping Cart Management, and Order Management. It uses SQL Server, Entity Framework Core and JWT for authentication. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/eCommerceDsImageUrl.git",image:"/img/eCommerceDs.png"},{title:"eCommerceDsImageUrl_Docker",description:"ASP.NET Core 8.0 Web API project. It is the backend service layer for an e-commerce application, focused on data management. The Repository implements the data access logic. The Services contain the application's business logic. Key features implemented in the project include: Authentication and Authorization, User Management, Catalog Management, Shopping Cart Management, and Order Management. It uses SQL Server, Entity Framework Core and JWT for authentication. The API is implemented as a Docker image. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/eCommerceDsImageUrl_Docker.git",image:"/img/eCommerceDs.png"},{title:"eCommerceDsMicroServicesImageUrl",description:"ASP.NET Core 8.0 Web API project. It is the backend service layer for an e-commerce application, focused on data management. The Repository implements the data access logic. The Services contain the application's business logic. Key features implemented in the project include: Authentication and Authorization, User Management, Catalog Management, Shopping Cart Management, and Order Management. It uses SQL Server, Entity Framework Core and JWT for authentication. It is made up of three microservices: CdService, ShoppingService and UserService. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/eCommerceDsMicroServicesImageUrl.git",image:"/img/eCommerceDs.png"},{title:"eCommerceDsMicroServicesImageUrl_Docker",description:"ASP.NET Core 8.0 Web API project. It is the backend service layer for an e-commerce application, focused on data management. The Repository implements the data access logic. The Services contain the application's business logic. Key features implemented in the project include: Authentication and Authorization, User Management, Catalog Management, Shopping Cart Management, and Order Management. It uses SQL Server, Entity Framework Core and JWT for authentication. It is made up of three microservices: CdService, ShoppingService and UserService. The API is implemented as a Docker image. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/eCommerceDsMicroServicesImageUrl_Docker.git",image:"/img/eCommerceDs.png"},{title:"eCommerceDsNodeExpress_TypeScriptMongoDB",description:"Nodejs+Express API project. It is the backend service layer for an e-commerce application, focused on data management. The Repository implements the data access logic. The Services contain the application's business logic. Key features implemented in the project include: Authentication and Authorization, User Management, Catalog Management, Shopping Cart Management and Order Management. It uses TypeScript, MongoDB and JWT for authentication. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/eCommerceDsNodeExpress_TypeScriptMongoDB.git",image:"/img/eCommerceDs.png"},{title:"eCommerceDsNodeExpress_TypeScriptMongoDBDocker",description:"Nodejs+Express API project. It is the backend service layer for an e-commerce application, focused on data management. The Repository implements the data access logic. The Services contain the application's business logic. Key features implemented in the project include: Authentication and Authorization, User Management, Catalog Management, Shopping Cart Management and Order Management. It uses TypeScript, MongoDB and JWT for authentication. The API is implemented as a Docker image. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/eCommerceDsNodeExpress_TypeScriptMongoDBDocker.git",image:"/img/eCommerceDs.png"},{title:"eCommerceDsNodeExpress_TypeScriptPostgreSQL",description:"Nodejs+Express API project. It is the backend service layer for an e-commerce application, focused on data management. The Repository implements the data access logic. The Services contain the application's business logic. Key features implemented in the project include: Authentication and Authorization, User Management, Catalog Management, Shopping Cart Management and Order Management. It uses TypeScript, PostgreSQL and JWT for authentication. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/eCommerceDsNodeExpress_TypeScriptPostgreSQL.git",image:"/img/eCommerceDs.png"},{title:"eCommerceDsNodeExpress_TypeScriptPostgreSQLDocker",description:"Nodejs+Express API project. It is the backend service layer for an e-commerce application, focused on data management. The Repository implements the data access logic. The Services contain the application's business logic. Key features implemented in the project include: Authentication and Authorization, User Management, Catalog Management, Shopping Cart Management and Order Management. It uses TypeScript, PostgreSQL and JWT for authentication. The API is implemented as a Docker image. Images are not uploaded locally, the https://imgur.com service is used.",link:"https://github.com/moraisLuismNet/eCommerceDsNodeExpress_TypeScriptPostgreSQLDocker.git",image:"/img/eCommerceDs.png"},{title:"FantasticFries",description:" Website for a fictional restaurant called FantasticFries created with Astro. The website features a modern and attractive design, with sections for the Menu, Contact information, and an About Us page.",link:"https://github.com/moraisLuismNet/FantasticFries.git",image:"/img/FantasticFries.png"},{title:"Libft",description:"A project from 42 School that requires us to re-implement a set of standard C library functions, as well as some additional utility functions. This project is designed to help us understand the inner workings of these functions and to develop our skills in C programming.",link:"https://github.com/moraisLuismNet/Libft.git",image:"/img/Libft.png"},{title:"Library",description:"ASP.NET Core 8.0 Web API that manages library-related information, including authors, books, and publishing houses, as well as handling user authentication and logging actions performed on the system. It uses SQL Server, Entity Framework Core and JWT for authentication. ",link:"https://github.com/moraisLuismNet/Library.git",image:"/img/Library.png"},{title:"LibraryNodeExpress_TypeScriptMongoDB",description:"Nodejs+Express API that manages library-related information, including authors, books, and publishing houses, as well as handling user authentication and logging actions performed on the system. It uses TypeScript, MongoDB and JWT for authentication.",link:"https://github.com/moraisLuismNet/LibraryNodeExpress_TypeScriptMongoDB.git",image:"/img/Library.png"},{title:"LibraryNodeExpress_TypeScriptPostgreSQL",description:"Nodejs+Express API that manages library-related information, including authors, books, and publishing houses, as well as handling user authentication and logging actions performed on the system. It uses TypeScript, PostgreSQL and JWT for authentication.",link:"https://github.com/moraisLuismNet/LibraryNodeExpress_TypeScriptPostgreSQL.git",image:"/img/Library.png"},{title:"Library_MySQL",description:"ASP.NET Core 8.0 Web API that manages library-related information, including authors, books, and publishing houses, as well as handling user authentication and logging actions performed on the system. It uses MySQL, Entity Framework Core and JWT for authentication. ",link:"https://github.com/moraisLuismNet/Library_MySQL.git",image:"/img/Library.png"},{title:"Library_Sqlite",description:"ASP.NET Core 8.0 Web API that manages library-related information, including authors, books, and publishing houses, as well as handling user authentication and logging actions performed on the system. It uses Sqlite, Entity Framework Core and JWT for authentication.",link:"https://github.com/moraisLuismNet/Library_Sqlite.git",image:"/img/Library.png"},{title:"moraisLuismNet_LandingPage",description:"A Landing Page developed with Astro, TypeScript, HTML5 and CSS3.",link:"https://github.com/moraisLuismNet/moraisLuismNet_LandingPage.git",image:"/img/moraisLuismNet_LandingPage.png"},{title:"moraisLuismNet_Portfolio",description:"A Portfolio developed with Astro, TypeScript, HTML5 and CSS3.",link:"https://github.com/moraisLuismNet/moraisLuismNet_Portfolio.git",image:"/img/moraisLuismNet_Portfolio.png"},{title:"MoviesMinimalAPI",description:"ASP.NET Core 8.0 Web API project for managing movie and category-related information, including functionality for user management and authentication/authorization. Models represent database entities, such as Category, Movie, and User. DTOs are the objects used for data transfer between layers, with specific DTOs for creating, updating, viewing, and authenticating categories, movies, and users. Repositories encapsulate data access logic for entities. Services contain business logic and orchestrate operations, interacting with repositories and other functionality such as file management and password hashing. Validators use FluentValidation to validate input DTOs, ensuring that the data meets certain criteria. Mappers use AutoMapper to map objects between models and DTOs. They define endpoints using ASP.NET Core Minimal API functionality for categories, movies, and authentication/users. Entity Framework Core is configured for interaction with a SQL Server database.",link:"https://github.com/moraisLuismNet/MoviesMinimalAPI.git",image:"/img/MoviesMinimalAPI.png"},{title:"Store",description:"ASP.NET Core 8.0 Web API for a store, managing categories, products, and users. It includes controllers for CRUD operations and features such as pagination, filtering, image file management, and JWT authentication/authorization. It implements services for action logging, file management, password encryption and hashing, and a scheduled task. Entity Framework Core is configured for interaction with a SQL Server database, with DTOs for data transfer and validators for data input.",link:"https://github.com/moraisLuismNet/Store.git",image:"/img/Store.png"},{title:"Store_MySQL",description:"ASP.NET Core 8.0 Web API for a store, managing categories, products, and users. It includes controllers for CRUD operations and features such as pagination, filtering, image file management, and JWT authentication/authorization. It implements services for action logging, file management, password encryption and hashing, and a scheduled task. Entity Framework Core is configured for interaction with a MySQL database, with DTOs for data transfer and validators for data input.",link:"https://github.com/moraisLuismNet/Store_MySQL.git",image:"/img/Store.png"},{title:"Store_Sqlite",description:"ASP.NET Core 8.0 Web API for a store, managing categories, products, and users. It includes controllers for CRUD operations and features such as pagination, filtering, image file management, and JWT authentication/authorization. It implements services for action logging, file management, password encryption and hashing, and a scheduled task. Entity Framework Core is configured for interaction with a Sqlite database, with DTOs for data transfer and validators for data input.",link:"https://github.com/moraisLuismNet/Store_Sqlite.git",image:"/img/Store.png"}],g=2;let t=1;function m(a){const s=(a-1)*g,n=s+g,r=d.slice(s,n),i=document.getElementById("projects-grid");i&&(i.innerHTML=r.map(e=>`
        <div class="project">
          <h3>${e.title}</h3>
          ${e.image?`<img src="${e.image}" alt="${e.title}" />`:""}
          <p>${e.description}</p>
          <a href="${e.link}" target="_blank">Ver en GitHub</a>
        </div>
      `).join(""))}function p(){const a=Math.ceil(d.length/g),s=document.getElementById("pagination");if(s){let n='<button id="prev-btn" disabled>Anterior</button>';for(let e=1;e<=a;e++)n+=`<button class="page-btn" data-page="${e}">${e}</button>`;n+='<button id="next-btn">Siguiente</button>',s.innerHTML=n,document.querySelectorAll(".page-btn").forEach(e=>{e.addEventListener("click",l=>{const c=l.target;c&&c.dataset.page&&(t=parseInt(c.dataset.page),m(t),o(a))})});const r=document.getElementById("prev-btn");r&&r.addEventListener("click",()=>{t>1&&(t--,m(t),o(a))});const i=document.getElementById("next-btn");i&&i.addEventListener("click",()=>{t<a&&(t++,m(t),o(a))}),o(a)}}function o(a){document.querySelectorAll(".page-btn").forEach(i=>{i.classList.remove("active"),i.dataset.page&&parseInt(i.dataset.page)===t&&i.classList.add("active")});const n=document.getElementById("prev-btn");n&&(n.disabled=t===1);const r=document.getElementById("next-btn");r&&(r.disabled=t===a)}m(t);p();
